一、内核链表深度分析
1.链表对比
1.1 链表简介
链表是一种常用的数据结构，它通过指针将一系列数据节点连接成一条数据链。相对于
数组，链表具有更好的动态性，建立链表时无需预先知道数据总量，可以随机分配空间
无需预先知道数据总量，可以随机分配空间，可以高效地在链表中的任意位置实时插入
或删除数据。链表的开销主要是访问的顺序性和组织链的空间损失。

1.2 传统链表与Linux内核链表
传统链表：指针域的next通常是指向下一个节点的头
Linux内核链表：指针域的next通常是指向下一个节点指针域

2.内核链表使用
2.1 内核链表-结构
struct list_head 
{ 
	struct list_head *next, *prev; 
}; 
list_head结构包含两个指向list_head结构的指针prev和next，由此可见，内核的链表具备双链表功
能，实际上，通常它都组织成双向循环链表。

2.2 内核链表-函数
①. INIT_LIST_HEAD:创建链表
②. list_add：在链表头插入节点
③. list_add_tail：在链表尾插入节点
④. list_del：删除节点
⑤. list_entry：取出节点
⑥. list_for_each：遍历链表

3.内核链表实现分析

4.移植内核链表
