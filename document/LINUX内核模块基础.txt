LINUX内核模块基础
一、为什么需要内核模块？
1.1 什么是内核模块
Linux内核的整体结构非常庞大，其包含的组件也非常多，如何使用这些组件呢？ 
方法1：把所有的组件都编译进内核文件，即：zImage或bzImage，但这样会导
致一个问题：占用内存过多.有没有一种机制能让内核文件本身并不包含某组件，而
是在该组件需要被使用的时候，动态地添加到正在运行的内核中呢？

内核模块具有如下特点：
• 模块本身并不被编译进内核文件(zImage或者bzImage)
• 可以根据需求，在内核运行期间动态的安装或卸载。

二、如何使用内核模块
2.1 安装内核模块 insmod
#insmod /home/dnw_usb.ko
2.2 卸载内核模块 rmmod
#rmmod dnw_usb
2.3 查看内核模块 lsmod
#lsmod

三、内核模块设计
3.1 范例代码分析
#include <linux/init.h>
#include <linux/module.h>
static int hello_init(void)
{
	printk(KERN_WARNING"Hello, world !\n");
	return 0;
}
static void hello_exit(void)
{
	printk(KERN_INFO "Goodbye,  world\n");
}
module_init(hello_init);
module_exit(hello_exit);
内核模块程序与应用程序的最大区别在于内核模块没有main函数。
那内核模块程序的入口在哪儿呢?内核模块的入口由module_init宏来指明的，
当insmod加载时调用module_init
当rmmod卸载时执行module_exit

3.2 思维导图设计,根据思维导图编写内核模块
1）头文件：
#include <linux/init.h>
#include <linux/module.h>
2）加载函数
module_init
3）卸载函数
module_exit

3.3 编写makefile，编译内核模块
#vim Makefile
obj-m := helloworld.o
KDIR := /home/myroot/TQ210/kernel/linux  //内核代码路径

all:
	make -C $(KDIR) M=$(PWD) modules CROSS_COMPILE=arm-linux- ARCH=arm //M=$(PWD)：表示我的内核代码的路径，当然就是当前路径

clean:
	rm -rf *.o *.ko *.order 

3.4 安装和卸载helloworld.ko
1) insmod helloworld.ko
# insmod helloworld.ko 
Hello, world !

2) rmmod helloworld
# rmmod helloworld    
报错：问题出在当去卸载一个模块的时候，在lib/modules目录下需要有与内核版本相同的目录，
然而此处lib/modules下没有相应的目录
rmmod: chdir(2.6.35.7-EmbedSky-g0382dcb-dirty): No such file or directory
解决：手动创建与内核版本相同的目录
#mkdir -p /lib/modules/$(uname -r)
此处使用$(uname -r)就可获取到当前内核版本
例：
# mkdir -p lib/modules/$(uname -r) 
# ls lib/modules/
2.6.35.7-EmbedSky-g0382dcb-dirty  2.6.35.7-EmbedSky-g36ca11e

# rmmod helloworld
Goodbye,  world
rmmod: module 'helloworld' not found

成功

四、内核模块可选信息
4.1 模块申明
1)MODULE_LICENSE（”遵守的协议”）
申明该模块遵守的许可证协议，如："GPL"、"GPL v2"等

2)MODULE_AUTHOR("作者")
申明模块的作者
3)MODULE_DESCRIPTION("模块的功能描述")
申明模块的功能

4)MODULE_VERSION("V1.0")
申明模块的版本

例：添加内核模块申明实例
#include <linux/init.h>
#include <linux/module.h>
MODULE_LICENSE("GPL")
static int hello_init(void)
{
	printk(KERN_WARNING"Hello, world !\n");
	return 0;
}
static void hello_exit(void)
{
	printk(KERN_INFO "Goodbye,  world\n");
}
module_init(hello_init);
module_exit(hello_exit);

4.2 模块参数
在应用程序中int main(int argc, char** argv)
argc表示命令行输入的参数个数,argv中保存输入的参数

1)那么内核模块中可以通过命令行输入参数么？
答案：可以
2)参数怎么传入，传入后保存在哪里？
通过宏module_param指定保存模块参数的变量。模块参数
用于在加载模块时传递参数给模块。
module_param(name,type,perm)
name:变量的名称
type:变量类型，bool:布尔型 int:整型 charp:字符串型
perm是访问权限。 S_IRUGO:读权限 S_IWUSR:写权限
例:
int a = 3;
char *st;
module_param(a,int, S_IRUGO);
module_param(st,charp, S_IRUGO);

例：使用模块参数:
#include <linux/init.h>
#include <linux/module.h>
MODULE_LICENSE("GPL")
int a = 3;
static int hello_init(void)
{
	printk(KERN_WARNING"Hello, world !\n");
	printk("a=%d\n",a);
	return 0;
}
static void hello_exit(void)
{
	printk(KERN_INFO "Goodbye,  world\n");
}
module_init(hello_init);
module_exit(hello_exit);
启动开发板：
# insmod helloworld.ko 
Hello, world !
a=3
但是做insmod helloworld.ko a=10操作时报错，原因是没有将a申明为模块参数，此时a就是普通全局变量。
# insmod helloworld.ko a=10
helloworld: Unknown parameter 'a'
insmod: cannot insert 'helloworld.ko': unknown symbol in module or invalid parameter

做如下修改：添加module_param(a,int,S_IRUGO|S_IWUSR)
#include <linux/init.h>
#include <linux/module.h>
MODULE_LICENSE("GPL")
int a = 3;
module_param(a,int,S_IRUGO|S_IWUSR);
static int hello_init(void)
{
	printk(KERN_WARNING"Hello, world !\n");
	printk("a=%d\n",a);
	return 0;
}
static void hello_exit(void)
{
	printk(KERN_INFO "Goodbye,  world\n");
}
module_init(hello_init);
module_exit(hello_exit);
再次做如下操作：就可以正确得到内核模块参数了，此时a就被申明为模块参数了
# insmod helloworld.ko a=10
Hello, world !
a=10

例：
#include <linux/init.h>
#include <linux/module.h>
MODULE_LICENSE("GPL")
int a = 3;
char *p;//注意不要给变量赋初值
module_param(a,int,S_IRUGO|S_IWUSR);
module_param(p,charp,S_IRUGO|S_IWUSR);
static int hello_init(void)
{
	printk(KERN_WARNING"Hello, world !\n");
	printk("a=%d\n",a);
	printk("p=%s\n",p);
	return 0;
}
static void hello_exit(void)
{
	printk(KERN_INFO "Goodbye,  world\n");
}
module_init(hello_init);
module_exit(hello_exit);

# insmod helloworld.ko p=abcd
Hello, world !
a=3
p=abcd
# insmod helloworld.ko a=10 p=abcd
Hello, world !
a=10
p=abcd
可见字符参数也能正常使用

4.3 符号输出
什么是内核符号？
为什么要导出模块中的内核符号？

内核符号的导出使用宏
EXPORT_SYMBOL(符号名)
EXPORT_SYMBOL_GPL(符号名)
说明：
其中EXPORT_SYMBOL_GPL只能用于包含GPL许可证的模块。

实例：导出内核符号
















