一、Linux设备驱动程序概述
1 驱动分类
1.1 常规分类方法
1.1.1 字符设备
	字符设备是一种按字节来访问的设备，字符驱动则负责驱动字符设备，这样的
驱动通常实现 open, close, read和write 系统调用。例：串口，LED，按键。

1.1.2 块设备
	在大部分的Unix系统中, 块设备定义为：以块(通常是512字节)为最小传输单位的设备，
块设备不能按字节处理数据。

	而Linux则允许块设备传送任意数目的字节。因此, 块和字符设备的区别仅仅是驱动与
内核的接口不同。常见的块设备包括硬盘,flash,SD卡.....

1.1.3 网络设备
	网络接口可以是一个硬件设备,如网卡; 但也可以是一个纯粹的软件设备, 比如回环接口(lo).
一个网络接口负责发送和接收数据报文。

1.2 总线分类法
USB设备，PCI设备，平台总线设备

2 驱动学习方法
2.1 驱动模型
1)分析范例代码
2)制作思维导图
3)自己编写代码
4)驱动程序框架

2.2 硬件操作
	将裸机中的硬件操作将裸机中的硬件操作移植到Linux驱动中
	
2.3 驱动程序测试



二、硬件访问技术
1 访问流程
1.1 硬件访问实质
	驱动程序控制设备，主要是通过访问设备内的寄存器来达到控制目的,因此我们讨论如何访问硬件，
就成了如何访问这些寄存器了。

2 地址映射
	在Linux系统中，无论是内核程序还是应用程序，都只能使用虚拟地址，而芯片手册中给出的硬件
寄存器地址或者RAM地址则是物理地址，无法直接使用，因此，我们读写寄存器的第1步就是将将它的
物理地址映射为虚拟地址。

2.1 动态映射
	所谓动态映射，是指在驱动程序中采用ioremap函数将物理地址映射为虚拟地址。
原型：void * ioremap(physaddr, size)
参数：
Physaddr：待映射的物理地址
Size: 映射的区域长度
返回值：映射后的虚拟地址

2.2 静态映射
	所谓静态映射，是指Linux系统根据用户事先指定的映射关系，在内核启动时，自动地将物理地址
映射为虚拟地址。

Q1. 如何事先指定映射关系？
答：①：先填充完map_desc结构体。②：填充完结构体之后还得告诉内核。
Q2. 那么怎么告诉内核呢？
cpu.c (z:\tq210\kernel\linux\arch\arm\mach-s5pv210)
static struct map_desc s5pv210_iodesc[] __initdata 来告诉内核

Q3. 内核启动时，在什么地方完成自动映射？
cpu.c (z:\tq210\kernel\linux\arch\arm\mach-s5pv210)
void __init s5pv210_map_io(void)
{
	.......
	iotable_init(s5pv210_iodesc, ARRAY_SIZE(s5pv210_iodesc));
	.......
}
由iotable_init完成自动映射

2.3 映射关系
	在静态映射中，用户是通过map_desc结构来指明物理地址与虚拟地址的映射关系。
struct map_desc {
	unsigned long virtual;	/* 映射后的虚拟地址 */
	unsigned long pfn; 		/* 物理地址所在的页帧号 */
	unsigned long length;	/* 映射长度 */
	unsigned int type;		/* 映射的设备类型 */
};
pfn: 利用__phys_to_pfn(物理地址)可以计算出物理地址所在的物理页帧号

3 寄存器读写
	在完成地址映射后，就可以读写寄存器了，Linux内核提供了一系列函数，来读写寄存器。
unsigned ioread8(void *addr)
unsigned ioread16(void *addr)
unsigned ioread32(void *addr)
unsigned readb(address)
unsigned readw(address)
unsigned readl(address)
void iowrite8(u8 value, void *addr)
void iowrite16(u16 value, void *addr)
void iowrite32(u32 value, void *addr)
void writeb(unsigned value, address)
void writew(unsigned value, address)
void writel(unsigned value, address)













