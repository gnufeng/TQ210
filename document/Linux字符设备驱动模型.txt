一、使用字符设备驱动
1 编译/安装驱动
	在Linux系统中，驱动程序通常采用内核模块的程序结构来进行编码。因此，编译/安装一个驱
动程序，其实质就是编译/安装一个内核模块。

编译/安装字符设备驱动程序:
1.1 创建如下目录
Z:\TQ210\mytest_modules\mychar_dev\memory_dev\driver
1.2 编写memdev.c驱动程序和Makefile文件
1.3 编译/安装
#cp memdev.ko  ../../../../rootfs/
启动开发板，挂在跟文件系统
#insmod memdev.ko

2 创建设备文件
2.1 字符设备访问流程
①应用程序通过文件名找到字符设备文件，应用程序读写字符设备实质就是操作字符设备文件。
②字符设备文件在根据主设备号找到设备驱动程序，通过主设备号来关联字符设备文件和设备驱动程序。

	通过字符设备文件，应用程序可以使用相应的字符设备驱动程序来控制字符设备。
创建字符设备文件的方法一般有两种：
1) 使用mknod命令
mknod /dev/文件名 c 主设备号 次设备号(非负0-255)

Q1：怎么知道什么字符设备文件对应什么主设备号？
# cat /proc/devices
Character devices:
  1 mem
252 memdev
就可以查到对应的主设备号

创建字符设备文件步骤:
①：在开发板中用mknod创建一个设备文件：
#mknod /dev/memdev0 c 252 0
# ls /dev/memdev0 
/dev/memdev0	//在/dev/memdev0下确实有自己创建的字符设备文件

2) 使用函数在驱动程序中创建（后续课程介绍）

创建字符设备文件:

3 访问设备
编写应用程序访问字符设备:
3.1 编写一个应用程序，路径：Z:\TQ210\mytest_modules\mychar_dev\memory_dev\app
#vim write.c 
#include<stdio.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
 
int main()
{
    int fd = 0;
	int src = 2018;
	
	/*打开设备文件*/
	fd = open("/dev/memdev0",O_RDWR);
	
	/*写入数据*/
	write(fd, &src, sizeof(int));
	
	/*关闭设备*/
	close(fd);
	
	return 0;	
}

#cp write_mem ../../../../rootfs/
在开发板执行write_mem
# ./write_mem 报错如下,意思是应用程序所依赖的库找不到
-/bin/sh: ./write_mem: not found

可以用以下方法分析类似上述报错：
使用arm-linux-readelf -d write_mem指令来检查应用程序 -d是用来查询所依赖的动态链接库的。
#arm-linux-readelf -d write_mem 
Dynamic section at offset 0x4f0 contains 24 entries:
  Tag        Type                         Name/Value
 0x00000001 (NEEDED)                     Shared library: [libc.so.6]	//需要用到[libc.so.6]库
 0x0000000c (INIT)                       0x82bc
 0x0000000d (FINI)                       0x84b8
 0x00000019 (INIT_ARRAY)                 0x104e4
 0x0000001b (INIT_ARRAYSZ)               4 (bytes)
 0x0000001a (FINI_ARRAY)                 0x104e8
 0x0000001c (FINI_ARRAYSZ)               4 (bytes)
 0x00000004 (HASH)                       0x8168
 0x00000005 (STRTAB)                     0x8208
 0x00000006 (SYMTAB)                     0x8198
 0x0000000a (STRSZ)                      77 (bytes)
 0x0000000b (SYMENT)                     16 (bytes)
 0x00000015 (DEBUG)                      0x0
 0x00000003 (PLTGOT)                     0x105d8
 0x00000002 (PLTRELSZ)                   48 (bytes)
 0x00000014 (PLTREL)                     REL
 0x00000017 (JMPREL)                     0x828c
 0x00000011 (REL)                        0x8284
 0x00000012 (RELSZ)                      8 (bytes)
 0x00000013 (RELENT)                     8 (bytes)
 0x6ffffffe (VERNEED)                    0x8264
 0x6fffffff (VERNEEDNUM)                 1
 0x6ffffff0 (VERSYM)                     0x8256
 0x00000000 (NULL)                       0x0
 
但是在开发板中的/lib/目录下没有相应的库
# ls /lib/
modules
解决方法：使用静态编译或者找到相应的库拷贝到开发板/lib/目录下

③：编写一个应用程序，路径：Z:\TQ210\mytest_modules\mychar_dev\memory_dev\app
#vim read_mem.c 
#include<stdio.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>

int main()
{
    int fd = 0;
	int dst = 0;
	
	/*打开设备文件*/
	fd = open("/dev/memdev0",O_RDWR);
	
	/*写入数据*/
	read(fd, &dst, sizeof(int));
	
	printf("dst is %d\n",dst);
	
	/*关闭设备*/
	close(fd);
	
	return 0;	
}

二、字符驱动编程模型
1 设备描述结构cdev
	在任何一种驱动模型中，设备都会用内核中的一种结构来描述。我们的字符设备在内核中使用struct cdev
来描述。

1.1 结构定义
cdev.h (z:\tq210\kernel\linux\include\linux)
struct cdev {
	struct kobject kobj;				//内嵌的kobject对象
	struct module *owner;				//所属模块
	const struct file_operations *ops;	//设备操作集,文件操作结构体
	struct list_head list;				//linux内核所维护的链表指针
	dev_t dev; 							//设备号，包括主设备号和次设备号
	unsigned int count; 				//表明该类设备有几个
};
1.2 设备号
查看/dev目录下设备号
# cat /proc/devices
Character devices:
  1 mem
252 memdev
就可以查到对应的主设备号

Q1：字符设备文件与字符驱动程序如何建立起对应关系??
答案：主设备号

Q2：驱动程序怎么来区分串口1和串2？
答案：次设备号

1.3 设备号操作
	Linux内核中使用dev_t类型来定义设备号，dev_t这种类型其实质为32位的unsigned int，其中高12位为
主设备号，低20位为次设备号.
kdev_t.h (z:\tq210\kernel\linux\include\linux)
Q1：如果知道主设备号，次设备号，怎么组合成dev_t类型
答：dev_t dev = MKDEV(主设备号，次设备号)
Q2: 如何从dev_t中分解出主设备号?
答: 主设备号 = MAJOR(dev_t dev)
Q3: 如何从dev_t中分解出次设备号？
答: 次设备号=MINOR(dev_t dev)

1.4 设备号分配
Q1：如何为设备分配一个主设备号？
答: 静态申请
	开发者自己选择一个数字作为主设备号，然后通过函数register_chrdev_region向内核申请使用。
缺点：如果申请使用的设备号已经被内核中的其他驱动使用了，则申请失败。
	动态分配：
	使用alloc_chrdev_region由内核分配一个可用的主设备号。优点：因为内核知道哪些号已经被使用了，
所以不会导致分配到已经被使用的设备号。
原型：int alloc_chrdev_region(dev_t *dev, unsigned baseminor, unsigned count,const char *name)
dev：		实际分配出来的是设备号，包括主设备号和次设备号，主设备号可以分配好，但次设备号需要指定
baseminor： 表示起始次设备号是0
count：		表示需要分配多少个次设备号
name:		表示哪一个设备在分配,就是驱动的名字,就是cat /proc/devices 下添加的驱动

1.5 设备号注销
	不论使用何种方法分配设备号，都应该在驱动退出时，使用unregister_chrdev_region函数释放这些设备号。

1.6 操作函数集
	应用程序通过open，write，read等函数打开字符设备文件，字符设备文件与字符驱动程序通过主设备号
建立起对应关系

1.7 分析file_operations定义
fs.h (z:\tq210\kernel\linux\include\linux)
	Struct file_operations是一个函数指针的集合，定义能在设备上进行的操作。结构中的函数指针指向驱动
中的函数,这些函数实现一个针对设备的操作, 对于不支持的操作则设置函数指针为 NULL。例如：
struct file_operations dev_fops = {
	.llseek = NULL,
	.read = dev_read,
	.write = dev_write,
	.ioctl = dev_ioctl,
	.open = dev_open,
	.release = dev_release,
};

2 字符设备驱动模型
2.1 驱动模型：
	在Linux系统中,设备的类型非常繁多，如：字符设备，块设备，网络接口设备，USB设备，PCI设备，平台
设备，混杂设备……，而设备类型不同，也意味着其对应的驱动程序模型不同，这样就导致了我们需要去掌握众
多的驱动程序模型。那么能不能从这些众多的驱动模型中提炼出一些具有共性的规则，则是我们能不能学好Linux
驱动的关键。

2.2 设备驱动模型：
2.2.1 驱动初始化：
①分配设备描述符结构cdev
	cdev变量的定义可以采用静态和动态两种办法
• 静态分配
struct cdev mdev;
• 动态分配
struct cdev *pdev = cdev_alloc();

②初始化设备描述符结构
struct cdev的初始化使用cdev_init函数来完成。
cdev_init(struct cdev *cdev, const struct file_operations *fops)
参数：
cdev: 待初始化的cdev结构
fops: 设备对应的操作函数集

③注册设备描述符结构
字符设备的注册使用cdev_add函数来完成。
cdev_add(struct cdev *p, dev_t dev, unsigned count)
p: 待添加到内核的字符设备结构
dev: 设备号
count: 该类设备的设备个数

④硬件初始化
根据相应硬件的芯片手册，完成初始化。

2.2.2 实现设备操作
① open
	open设备方法是驱动程序用来为以后的操作完成初始化准备工作的。在大部分驱动程序
中，open完成如下工作：
标明次设备号
启动设备

② read
	read设备方法通常完成2件事情：
	1) 从设备中读取数据(属于硬件访问类操作)
	2) 将读取到的数据返回给应用程序
ssize_t (*read) (struct file *filp, char __user *buff, size_t count, loff_t *offp)
参数分析：
filp ：与字符设备文件关联的file结构指针, 由内核创建。
buff : 从设备读取到的数据，需要保存到的位置。由read系统调用提供该参数。
count: 请求传输的数据量，由read系统调用提供该参数。
offp: 文件的读写位置，由内核从file结构中取出后，传递进来。

buff参数是来源于用户空间的指针，这类指针都不能被内核代码直接引用，必须使用专门的函数
uaccess.h (z:\tq210\kernel\linux\arch\arm\include\asm)
int copy_from_user(void *to, const void __user *from, int n)
int copy_to_user(void __user *to, const void *from, int n)

③ write
	write设备方法通常完成2件事情：
	1) 从应用程序提供的地址中取出数据
	2) 将数据写入设备(属于硬件访问类操作)
ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *)
其参数类似于read

④ lseek
⑤ close
⑥ release
	release方法的作用正好与open相反。这个设备方法有时也称为close，它应该：
关闭设备。

分析file_operations，设备操作原型
打开设备，响应open系统
int (*open) (struct inode *, struct file *)
关闭设备，响应close系统调用
int (*release) (struct inode *, struct file *)
重定位读写指针，响应lseek系统调用
loff_t (*llseek) (struct file *, loff_t, int)
从设备读取数据，响应read系统调用
ssize_t (*read) (struct file *, char __user *, size_t, loff_t *)
向设备写入数据，响应write系统调用
size_t (*write) (struct file *, const char __user *, size_t, loff_t *)

Struct file：
	在Linux系统中，每一个打开的文件，在内核中都会关联一个struct file，它由内核在打开文件
时创建, 在文件关闭后释放。
重要成员：
loff_t f_pos /*文件读写指针*/
struct file_operations *f_op /*该文件所对应的操作*/

Struct inode：
	每一个存在于文件系统里面的文件都会关联一个inode结构，该结构主要用来记录文件物理上的信息。
因此, 它和代表打开文件的file结构是不同的。一个文件没有被打开时不会关联file结构，但是却会关联
一个inode 结构。
重要成员：
dev_t i_rdev：设备号


2.2.3 驱动注销
	当我们从内核中卸载驱动程序的时候，需要使用cdev_del函数来完成字符设备的注销。

3 范例驱动分析
3.1 应用程序->访问->驱动程序
例：以read为例：
分析：当应用程序使用read系统调用的时候，那么它是通过什么路径来调用内核驱动程序的xxx_read实现代码。
#include<stdio.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
int main()
{
     int fd = 0;
     int dst = 0;
     fd = open("/dev/memdev0",O_RDWR);   //打开文件，权限可读可写
     read(fd,&dst,sizeof(int));          //使用内核调用read函数
	 printf("dst is %d\n",dst);
     close(fd);

     return 0;
}

对他进行编译：
#arm-linux-gcc -static -g read_mem.c -o read_mem
在进行反汇编：
#arm-linux-objdump -D -S read_mem > read_mem_dump //找到main函数
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>

int main()
{
    8228:	e92d4800 	push	{fp, lr}
    822c:	e28db004 	add	fp, sp, #4	; 0x4
    8230:	e24dd008 	sub	sp, sp, #8	; 0x8
     int fd = 0;
    8234:	e3a03000 	mov	r3, #0	; 0x0
    8238:	e50b3008 	str	r3, [fp, #-8]
     int dst = 0;
    823c:	e3a03000 	mov	r3, #0	; 0x0
    8240:	e50b300c 	str	r3, [fp, #-12]
     fd = open("/dev/memdev0",O_RDWR);   //打开文件，权限可读可写
    8244:	e59f004c 	ldr	r0, [pc, #76]	; 8298 <main+0x70>
    8248:	e3a01002 	mov	r1, #2	; 0x2
    824c:	eb0028a3 	bl	124e0 <__libc_open>
    8250:	e1a03000 	mov	r3, r0
    8254:	e50b3008 	str	r3, [fp, #-8]
     read(fd,&dst,sizeof(int));          //
    8258:	e24b300c 	sub	r3, fp, #12	; 0xc
    825c:	e51b0008 	ldr	r0, [fp, #-8]
    8260:	e1a01003 	mov	r1, r3
    8264:	e3a02004 	mov	r2, #4	; 0x4
    8268:	eb0028e4 	bl	12600 <__libc_read>	//吧参数准备好之后去调用__libc_read
	 printf("dst is %d\n",dst);
    826c:	e51b300c 	ldr	r3, [fp, #-12]
    8270:	e59f0024 	ldr	r0, [pc, #36]	; 829c <main+0x74>
    8274:	e1a01003 	mov	r1, r3
    8278:	eb000364 	bl	9010 <_IO_printf>
     close(fd);
    827c:	e51b0008 	ldr	r0, [fp, #-8]
    8280:	eb0028ba 	bl	12570 <__libc_close>

     return 0;
    8284:	e3a03000 	mov	r3, #0	; 0x0
}


00012600 <__libc_read>:
   ....................................
   12614:	e3a07003 	mov	r7, #3	; 0x3
   12618:	ef000000 	svc	0x00000000
   ....................................
应用程序使用read系统调用，先把3传给r7中，在执行svc指令。
Q1：那么svc指令到底会对系统产生什么影响？
答：svc是系统调用指令(特殊指令)，当在应用程序中使用这个指令之后，pc指针会从用户空间进入到内核空间。
而且入口是固定的，然后内核会去取这个number 3,那么3代表什么意思呢？表明的是这次希望调用的是read代码。

依据no=3去系统调用表查表。

Q2：那么Q1中所说的固定入口在什么地方？
答：在entry-common.S (z:\tq210\kernel\linux\arch\arm\kernel)文件中的
ENTRY(vector_swi)标号处。

3.2 应用程序->访问->驱动程序步骤：
1) 先将3传给r7，然后执行svc系统调用指令，将pc指针从用户空间转入到内核空间,知道内核固定入口ENTRY(vector_swi)。
2) 取系统调用编号:addne	scno, r7, #__NR_SYSCALL_BASE	@ put OS number in
3) 根据系统调用编号去查表，那么表在什么地方？
找到如下代码：sys_call_table系统调用表。
adr	tbl, sys_call_table		@ load syscall table pointer

就在entry-common.S (z:\tq210\kernel\linux\arch\arm\kernel)文件中
ENTRY(sys_call_table)
#include "calls.S"

calls.S就是包含很多函数的表，然后根据系统调用编号从这张表中找到对应的函数。

4) 根据反汇编知道传进来的系统调用编号3找到sys_read函数。
那么从应用程序read找到内核sys_read到此分析完成。

5) 接下来在分析sys_read是怎么实现的？
于是在
Syscalls.h (z:\tq210\kernel\linux\include\linux)找到
#define SYSCALL_DEFINE1(name, ...) SYSCALL_DEFINEx(1, _##name, __VA_ARGS__)
#define SYSCALL_DEFINE2(name, ...) SYSCALL_DEFINEx(2, _##name, __VA_ARGS__)
#define SYSCALL_DEFINE3(name, ...) SYSCALL_DEFINEx(3, _##name, __VA_ARGS__)
#define SYSCALL_DEFINE4(name, ...) SYSCALL_DEFINEx(4, _##name, __VA_ARGS__)
#define SYSCALL_DEFINE5(name, ...) SYSCALL_DEFINEx(5, _##name, __VA_ARGS__)
#define SYSCALL_DEFINE6(name, ...) SYSCALL_DEFINEx(6, _##name, __VA_ARGS__)
read_write.c (z:\tq210\kernel\linux\fs)
找到：
SYSCALL_DEFINE3(read, unsigned int, fd, char __user *, buf, size_t, count)
{
	struct file *file;
	ssize_t ret = -EBADF;
	int fput_needed;

	file = fget_light(fd, &fput_needed);
	if (file) {
		loff_t pos = file_pos_read(file);
		ret = vfs_read(file, buf, count, &pos);
		file_pos_write(file, pos);
		fput_light(file, fput_needed);
	}

	return ret;
}

接下来在看vfs_read函数。
read_write.c (z:\tq210\kernel\linux\fs)
ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
{
	.......
	ret = file->f_op->read(file, buf, count, pos);
	.......
}
最终驱动read函数就是在这里实现的。



